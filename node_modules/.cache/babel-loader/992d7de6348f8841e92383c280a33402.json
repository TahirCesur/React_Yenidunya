{"ast":null,"code":"import _objectSpread from \"C:/Users/HP/Desktop/React_Yenidunya/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"C:/Users/HP/Desktop/React_Yenidunya/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"C:/Users/HP/Desktop/React_Yenidunya/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"type\", \"name\", \"value\", \"onChange\", \"vertical\"];\nimport * as React from 'react';\nimport invariant from 'invariant';\nimport { useUncontrolled } from 'uncontrollable';\nimport chainFunction from './createChainedFunction';\nimport { map } from './ElementChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ToggleButtonGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n    value: 'onChange'\n  }),\n      children = _useUncontrolled.children,\n      _useUncontrolled$type = _useUncontrolled.type,\n      type = _useUncontrolled$type === void 0 ? 'radio' : _useUncontrolled$type,\n      name = _useUncontrolled.name,\n      value = _useUncontrolled.value,\n      onChange = _useUncontrolled.onChange,\n      _useUncontrolled$vert = _useUncontrolled.vertical,\n      vertical = _useUncontrolled$vert === void 0 ? false : _useUncontrolled$vert,\n      controlledProps = _objectWithoutProperties(_useUncontrolled, _excluded);\n\n  var getValues = function getValues() {\n    return value == null ? [] : [].concat(value);\n  };\n\n  var handleToggle = function handleToggle(inputVal, event) {\n    if (!onChange) {\n      return;\n    }\n\n    var values = getValues();\n    var isActive = values.indexOf(inputVal) !== -1;\n\n    if (type === 'radio') {\n      if (!isActive) onChange(inputVal, event);\n      return;\n    }\n\n    if (isActive) {\n      onChange(values.filter(function (n) {\n        return n !== inputVal;\n      }), event);\n    } else {\n      onChange([].concat(_toConsumableArray(values), [inputVal]), event);\n    }\n  };\n\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n  return /*#__PURE__*/_jsx(ButtonGroup, _objectSpread(_objectSpread({}, controlledProps), {}, {\n    ref: ref,\n    vertical: vertical,\n    children: map(children, function (child) {\n      var values = getValues();\n      var _child$props = child.props,\n          childVal = _child$props.value,\n          childOnChange = _child$props.onChange;\n\n      var handler = function handler(e) {\n        return handleToggle(childVal, e);\n      };\n\n      return /*#__PURE__*/React.cloneElement(child, {\n        type: type,\n        name: child.name || name,\n        checked: values.indexOf(childVal) !== -1,\n        onChange: chainFunction(childOnChange, handler)\n      });\n    })\n  }));\n});\nexport default Object.assign(ToggleButtonGroup, {\n  Button: ToggleButton\n});","map":{"version":3,"sources":["C:/Users/HP/Desktop/React_Yenidunya/node_modules/react-bootstrap/esm/ToggleButtonGroup.js"],"names":["React","invariant","useUncontrolled","chainFunction","map","ButtonGroup","ToggleButton","jsx","_jsx","ToggleButtonGroup","forwardRef","props","ref","value","children","type","name","onChange","vertical","controlledProps","getValues","concat","handleToggle","inputVal","event","values","isActive","indexOf","filter","n","process","env","NODE_ENV","child","childVal","childOnChange","handler","e","cloneElement","checked","Object","assign","Button"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,SAASC,GAAT,QAAoB,mBAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,IAAMC,iBAAiB,GAAG,aAAaT,KAAK,CAACU,UAAN,CAAiB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACtE,yBAQIV,eAAe,CAACS,KAAD,EAAQ;AACzBE,IAAAA,KAAK,EAAE;AADkB,GAAR,CARnB;AAAA,MACEC,QADF,oBACEA,QADF;AAAA,+CAEEC,IAFF;AAAA,MAEEA,IAFF,sCAES,OAFT;AAAA,MAGEC,IAHF,oBAGEA,IAHF;AAAA,MAIEH,KAJF,oBAIEA,KAJF;AAAA,MAKEI,QALF,oBAKEA,QALF;AAAA,+CAMEC,QANF;AAAA,MAMEA,QANF,sCAMa,KANb;AAAA,MAOKC,eAPL;;AAWA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,WAAMP,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqB,GAAGQ,MAAH,CAAUR,KAAV,CAA3B;AAAA,GAAlB;;AACA,MAAMS,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,KAAX,EAAqB;AACxC,QAAI,CAACP,QAAL,EAAe;AACb;AACD;;AACD,QAAMQ,MAAM,GAAGL,SAAS,EAAxB;AACA,QAAMM,QAAQ,GAAGD,MAAM,CAACE,OAAP,CAAeJ,QAAf,MAA6B,CAAC,CAA/C;;AACA,QAAIR,IAAI,KAAK,OAAb,EAAsB;AACpB,UAAI,CAACW,QAAL,EAAeT,QAAQ,CAACM,QAAD,EAAWC,KAAX,CAAR;AACf;AACD;;AACD,QAAIE,QAAJ,EAAc;AACZT,MAAAA,QAAQ,CAACQ,MAAM,CAACG,MAAP,CAAc,UAAAC,CAAC;AAAA,eAAIA,CAAC,KAAKN,QAAV;AAAA,OAAf,CAAD,EAAqCC,KAArC,CAAR;AACD,KAFD,MAEO;AACLP,MAAAA,QAAQ,8BAAKQ,MAAL,IAAaF,QAAb,IAAwBC,KAAxB,CAAR;AACD;AACF,GAfD;;AAgBA,IAAET,IAAI,KAAK,OAAT,IAAoB,CAAC,CAACC,IAAxB,IAAgCc,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC/B,SAAS,CAAC,KAAD,EAAQ,sEAAsE,mBAA9E,CAAjD,GAAsJA,SAAS,CAAC,KAAD,CAA/L,GAAyM,KAAK,CAA9M;AACA,SAAO,aAAaO,IAAI,CAACH,WAAD,kCACnBc,eADmB;AAEtBP,IAAAA,GAAG,EAAEA,GAFiB;AAGtBM,IAAAA,QAAQ,EAAEA,QAHY;AAItBJ,IAAAA,QAAQ,EAAEV,GAAG,CAACU,QAAD,EAAW,UAAAmB,KAAK,EAAI;AAC/B,UAAMR,MAAM,GAAGL,SAAS,EAAxB;AACA,yBAGIa,KAAK,CAACtB,KAHV;AAAA,UACSuB,QADT,gBACErB,KADF;AAAA,UAEYsB,aAFZ,gBAEElB,QAFF;;AAIA,UAAMmB,OAAO,GAAG,SAAVA,OAAU,CAAAC,CAAC;AAAA,eAAIf,YAAY,CAACY,QAAD,EAAWG,CAAX,CAAhB;AAAA,OAAjB;;AACA,aAAO,aAAarC,KAAK,CAACsC,YAAN,CAAmBL,KAAnB,EAA0B;AAC5ClB,QAAAA,IAAI,EAAJA,IAD4C;AAE5CC,QAAAA,IAAI,EAAEiB,KAAK,CAACjB,IAAN,IAAcA,IAFwB;AAG5CuB,QAAAA,OAAO,EAAEd,MAAM,CAACE,OAAP,CAAeO,QAAf,MAA6B,CAAC,CAHK;AAI5CjB,QAAAA,QAAQ,EAAEd,aAAa,CAACgC,aAAD,EAAgBC,OAAhB;AAJqB,OAA1B,CAApB;AAMD,KAbY;AAJS,KAAxB;AAmBD,CAjDsC,CAAvC;AAkDA,eAAeI,MAAM,CAACC,MAAP,CAAchC,iBAAd,EAAiC;AAC9CiC,EAAAA,MAAM,EAAEpC;AADsC,CAAjC,CAAf","sourcesContent":["import * as React from 'react';\nimport invariant from 'invariant';\nimport { useUncontrolled } from 'uncontrollable';\nimport chainFunction from './createChainedFunction';\nimport { map } from './ElementChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ToggleButtonGroup = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    children,\n    type = 'radio',\n    name,\n    value,\n    onChange,\n    vertical = false,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    value: 'onChange'\n  });\n  const getValues = () => value == null ? [] : [].concat(value);\n  const handleToggle = (inputVal, event) => {\n    if (!onChange) {\n      return;\n    }\n    const values = getValues();\n    const isActive = values.indexOf(inputVal) !== -1;\n    if (type === 'radio') {\n      if (!isActive) onChange(inputVal, event);\n      return;\n    }\n    if (isActive) {\n      onChange(values.filter(n => n !== inputVal), event);\n    } else {\n      onChange([...values, inputVal], event);\n    }\n  };\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n  return /*#__PURE__*/_jsx(ButtonGroup, {\n    ...controlledProps,\n    ref: ref,\n    vertical: vertical,\n    children: map(children, child => {\n      const values = getValues();\n      const {\n        value: childVal,\n        onChange: childOnChange\n      } = child.props;\n      const handler = e => handleToggle(childVal, e);\n      return /*#__PURE__*/React.cloneElement(child, {\n        type,\n        name: child.name || name,\n        checked: values.indexOf(childVal) !== -1,\n        onChange: chainFunction(childOnChange, handler)\n      });\n    })\n  });\n});\nexport default Object.assign(ToggleButtonGroup, {\n  Button: ToggleButton\n});"]},"metadata":{},"sourceType":"module"}