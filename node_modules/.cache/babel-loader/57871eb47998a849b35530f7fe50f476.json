{"ast":null,"code":"import _slicedToArray from \"D:/15.02.2024/Yay\\u0131nlanan Siteler/React_Yenidunya/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useState } from 'react';\n/**\n * Updates state, partial updates are merged into existing state values\n */\n\n/**\n * Mimics a React class component's state model, of having a single unified\n * `state` object and an updater that merges updates into the existing state, as\n * opposed to replacing it.\n *\n * ```js\n * const [state, setState] = useMergeState({ name: 'Betsy', age: 24 })\n *\n * setState({ name: 'Johan' }) // { name: 'Johan', age: 24 }\n *\n * setState(state => ({ age: state.age + 10 })) // { name: 'Johan', age: 34 }\n * ```\n *\n * @param initialState The initial state object\n */\n\nexport default function useMergeState(initialState) {\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var updater = useCallback(function (update) {\n    if (update === null) return;\n\n    if (typeof update === 'function') {\n      setState(function (state) {\n        var nextState = update(state);\n        return nextState == null ? state : Object.assign({}, state, nextState);\n      });\n    } else {\n      setState(function (state) {\n        return Object.assign({}, state, update);\n      });\n    }\n  }, [setState]);\n  return [state, updater];\n}","map":{"version":3,"sources":["D:/15.02.2024/YayÄ±nlanan Siteler/React_Yenidunya/node_modules/react-bootstrap/node_modules/@restart/hooks/esm/useMergeState.js"],"names":["useCallback","useState","useMergeState","initialState","state","setState","updater","update","nextState","Object","assign"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,aAAT,CAAuBC,YAAvB,EAAqC;AAClD,kBAA0BF,QAAQ,CAACE,YAAD,CAAlC;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,OAAO,GAAGN,WAAW,CAAC,UAAAO,MAAM,EAAI;AACpC,QAAIA,MAAM,KAAK,IAAf,EAAqB;;AACrB,QAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AAChCF,MAAAA,QAAQ,CAAC,UAAAD,KAAK,EAAI;AAChB,YAAMI,SAAS,GAAGD,MAAM,CAACH,KAAD,CAAxB;AACA,eAAOI,SAAS,IAAI,IAAb,GAAoBJ,KAApB,GAA4BK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,KAAlB,EAAyBI,SAAzB,CAAnC;AACD,OAHO,CAAR;AAID,KALD,MAKO;AACLH,MAAAA,QAAQ,CAAC,UAAAD,KAAK;AAAA,eAAIK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,KAAlB,EAAyBG,MAAzB,CAAJ;AAAA,OAAN,CAAR;AACD;AACF,GAV0B,EAUxB,CAACF,QAAD,CAVwB,CAA3B;AAWA,SAAO,CAACD,KAAD,EAAQE,OAAR,CAAP;AACD","sourcesContent":["import { useCallback, useState } from 'react';\n\n/**\n * Updates state, partial updates are merged into existing state values\n */\n\n/**\n * Mimics a React class component's state model, of having a single unified\n * `state` object and an updater that merges updates into the existing state, as\n * opposed to replacing it.\n *\n * ```js\n * const [state, setState] = useMergeState({ name: 'Betsy', age: 24 })\n *\n * setState({ name: 'Johan' }) // { name: 'Johan', age: 24 }\n *\n * setState(state => ({ age: state.age + 10 })) // { name: 'Johan', age: 34 }\n * ```\n *\n * @param initialState The initial state object\n */\nexport default function useMergeState(initialState) {\n  const [state, setState] = useState(initialState);\n  const updater = useCallback(update => {\n    if (update === null) return;\n    if (typeof update === 'function') {\n      setState(state => {\n        const nextState = update(state);\n        return nextState == null ? state : Object.assign({}, state, nextState);\n      });\n    } else {\n      setState(state => Object.assign({}, state, update));\n    }\n  }, [setState]);\n  return [state, updater];\n}"]},"metadata":{},"sourceType":"module"}