{"ast":null,"code":"import _slicedToArray from \"D:/15.02.2024/Yay\\u0131nlanan Siteler/React_Yenidunya/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport useEffect from './useIsomorphicEffect';\nimport { useState } from 'react';\nvar matchersByWindow = new WeakMap();\n\nvar getMatcher = function getMatcher(query, targetWindow) {\n  if (!query || !targetWindow) return undefined;\n  var matchers = matchersByWindow.get(targetWindow) || new Map();\n  matchersByWindow.set(targetWindow, matchers);\n  var mql = matchers.get(query);\n\n  if (!mql) {\n    mql = targetWindow.matchMedia(query);\n    mql.refCount = 0;\n    matchers.set(mql.media, mql);\n  }\n\n  return mql;\n};\n/**\n * Match a media query and get updates as the match changes. The media string is\n * passed directly to `window.matchMedia` and run as a Layout Effect, so initial\n * matches are returned before the browser has a chance to paint.\n *\n * ```tsx\n * function Page() {\n *   const isWide = useMediaQuery('min-width: 1000px')\n *\n *   return isWide ? \"very wide\" : 'not so wide'\n * }\n * ```\n *\n * Media query lists are also reused globally, hook calls for the same query\n * will only create a matcher once under the hood.\n *\n * @param query A media query\n * @param targetWindow The window to match against, uses the globally available one as a default.\n */\n\n\nexport default function useMediaQuery(query) {\n  var targetWindow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : typeof window === 'undefined' ? undefined : window;\n  var mql = getMatcher(query, targetWindow);\n\n  var _useState = useState(function () {\n    return mql ? mql.matches : false;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      matches = _useState2[0],\n      setMatches = _useState2[1];\n\n  useEffect(function () {\n    var mql = getMatcher(query, targetWindow);\n\n    if (!mql) {\n      return setMatches(false);\n    }\n\n    var matchers = matchersByWindow.get(targetWindow);\n\n    var handleChange = function handleChange() {\n      setMatches(mql.matches);\n    };\n\n    mql.refCount++;\n    mql.addListener(handleChange);\n    handleChange();\n    return function () {\n      mql.removeListener(handleChange);\n      mql.refCount--;\n\n      if (mql.refCount <= 0) {\n        matchers == null ? void 0 : matchers.delete(mql.media);\n      }\n\n      mql = undefined;\n    };\n  }, [query]);\n  return matches;\n}","map":{"version":3,"sources":["D:/15.02.2024/YayÄ±nlanan Siteler/React_Yenidunya/node_modules/react-bootstrap/node_modules/@restart/hooks/esm/useMediaQuery.js"],"names":["useEffect","useState","matchersByWindow","WeakMap","getMatcher","query","targetWindow","undefined","matchers","get","Map","set","mql","matchMedia","refCount","media","useMediaQuery","window","matches","setMatches","handleChange","addListener","removeListener","delete"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,IAAMC,gBAAgB,GAAG,IAAIC,OAAJ,EAAzB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAQC,YAAR,EAAyB;AAC1C,MAAI,CAACD,KAAD,IAAU,CAACC,YAAf,EAA6B,OAAOC,SAAP;AAC7B,MAAMC,QAAQ,GAAGN,gBAAgB,CAACO,GAAjB,CAAqBH,YAArB,KAAsC,IAAII,GAAJ,EAAvD;AACAR,EAAAA,gBAAgB,CAACS,GAAjB,CAAqBL,YAArB,EAAmCE,QAAnC;AACA,MAAII,GAAG,GAAGJ,QAAQ,CAACC,GAAT,CAAaJ,KAAb,CAAV;;AACA,MAAI,CAACO,GAAL,EAAU;AACRA,IAAAA,GAAG,GAAGN,YAAY,CAACO,UAAb,CAAwBR,KAAxB,CAAN;AACAO,IAAAA,GAAG,CAACE,QAAJ,GAAe,CAAf;AACAN,IAAAA,QAAQ,CAACG,GAAT,CAAaC,GAAG,CAACG,KAAjB,EAAwBH,GAAxB;AACD;;AACD,SAAOA,GAAP;AACD,CAXD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASI,aAAT,CAAuBX,KAAvB,EAAiG;AAAA,MAAnEC,YAAmE,uEAApD,OAAOW,MAAP,KAAkB,WAAlB,GAAgCV,SAAhC,GAA4CU,MAAQ;AAC9G,MAAML,GAAG,GAAGR,UAAU,CAACC,KAAD,EAAQC,YAAR,CAAtB;;AACA,kBAA8BL,QAAQ,CAAC;AAAA,WAAMW,GAAG,GAAGA,GAAG,CAACM,OAAP,GAAiB,KAA1B;AAAA,GAAD,CAAtC;AAAA;AAAA,MAAOA,OAAP;AAAA,MAAgBC,UAAhB;;AACAnB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIY,GAAG,GAAGR,UAAU,CAACC,KAAD,EAAQC,YAAR,CAApB;;AACA,QAAI,CAACM,GAAL,EAAU;AACR,aAAOO,UAAU,CAAC,KAAD,CAAjB;AACD;;AACD,QAAIX,QAAQ,GAAGN,gBAAgB,CAACO,GAAjB,CAAqBH,YAArB,CAAf;;AACA,QAAMc,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBD,MAAAA,UAAU,CAACP,GAAG,CAACM,OAAL,CAAV;AACD,KAFD;;AAGAN,IAAAA,GAAG,CAACE,QAAJ;AACAF,IAAAA,GAAG,CAACS,WAAJ,CAAgBD,YAAhB;AACAA,IAAAA,YAAY;AACZ,WAAO,YAAM;AACXR,MAAAA,GAAG,CAACU,cAAJ,CAAmBF,YAAnB;AACAR,MAAAA,GAAG,CAACE,QAAJ;;AACA,UAAIF,GAAG,CAACE,QAAJ,IAAgB,CAApB,EAAuB;AACrBN,QAAAA,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4BA,QAAQ,CAACe,MAAT,CAAgBX,GAAG,CAACG,KAApB,CAA5B;AACD;;AACDH,MAAAA,GAAG,GAAGL,SAAN;AACD,KAPD;AAQD,GApBQ,EAoBN,CAACF,KAAD,CApBM,CAAT;AAqBA,SAAOa,OAAP;AACD","sourcesContent":["import useEffect from './useIsomorphicEffect';\nimport { useState } from 'react';\nconst matchersByWindow = new WeakMap();\nconst getMatcher = (query, targetWindow) => {\n  if (!query || !targetWindow) return undefined;\n  const matchers = matchersByWindow.get(targetWindow) || new Map();\n  matchersByWindow.set(targetWindow, matchers);\n  let mql = matchers.get(query);\n  if (!mql) {\n    mql = targetWindow.matchMedia(query);\n    mql.refCount = 0;\n    matchers.set(mql.media, mql);\n  }\n  return mql;\n};\n/**\n * Match a media query and get updates as the match changes. The media string is\n * passed directly to `window.matchMedia` and run as a Layout Effect, so initial\n * matches are returned before the browser has a chance to paint.\n *\n * ```tsx\n * function Page() {\n *   const isWide = useMediaQuery('min-width: 1000px')\n *\n *   return isWide ? \"very wide\" : 'not so wide'\n * }\n * ```\n *\n * Media query lists are also reused globally, hook calls for the same query\n * will only create a matcher once under the hood.\n *\n * @param query A media query\n * @param targetWindow The window to match against, uses the globally available one as a default.\n */\nexport default function useMediaQuery(query, targetWindow = typeof window === 'undefined' ? undefined : window) {\n  const mql = getMatcher(query, targetWindow);\n  const [matches, setMatches] = useState(() => mql ? mql.matches : false);\n  useEffect(() => {\n    let mql = getMatcher(query, targetWindow);\n    if (!mql) {\n      return setMatches(false);\n    }\n    let matchers = matchersByWindow.get(targetWindow);\n    const handleChange = () => {\n      setMatches(mql.matches);\n    };\n    mql.refCount++;\n    mql.addListener(handleChange);\n    handleChange();\n    return () => {\n      mql.removeListener(handleChange);\n      mql.refCount--;\n      if (mql.refCount <= 0) {\n        matchers == null ? void 0 : matchers.delete(mql.media);\n      }\n      mql = undefined;\n    };\n  }, [query]);\n  return matches;\n}"]},"metadata":{},"sourceType":"module"}