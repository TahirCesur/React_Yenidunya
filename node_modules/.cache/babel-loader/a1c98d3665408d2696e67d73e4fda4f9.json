{"ast":null,"code":"import _toConsumableArray from \"D:/15.02.2024/Yay\\u0131nlanan Siteler/React_Yenidunya/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"D:/15.02.2024/Yay\\u0131nlanan Siteler/React_Yenidunya/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:/15.02.2024/Yay\\u0131nlanan Siteler/React_Yenidunya/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/15.02.2024/Yay\\u0131nlanan Siteler/React_Yenidunya/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport css from 'dom-helpers/css';\nimport { dataAttr } from './DataKey';\nimport getBodyScrollbarWidth from './getScrollbarWidth';\nexport var OPEN_DATA_ATTRIBUTE = dataAttr('modal-open');\n/**\n * Manages a stack of Modals as well as ensuring\n * body scrolling is is disabled and padding accounted for\n */\n\nvar ModalManager = /*#__PURE__*/function () {\n  function ModalManager() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        ownerDocument = _ref.ownerDocument,\n        _ref$handleContainerO = _ref.handleContainerOverflow,\n        handleContainerOverflow = _ref$handleContainerO === void 0 ? true : _ref$handleContainerO,\n        _ref$isRTL = _ref.isRTL,\n        isRTL = _ref$isRTL === void 0 ? false : _ref$isRTL;\n\n    _classCallCheck(this, ModalManager);\n\n    this.handleContainerOverflow = handleContainerOverflow;\n    this.isRTL = isRTL;\n    this.modals = [];\n    this.ownerDocument = ownerDocument;\n  }\n\n  _createClass(ModalManager, [{\n    key: \"getScrollbarWidth\",\n    value: function getScrollbarWidth() {\n      return getBodyScrollbarWidth(this.ownerDocument);\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement() {\n      return (this.ownerDocument || document).body;\n    }\n  }, {\n    key: \"setModalAttributes\",\n    value: function setModalAttributes(_modal) {// For overriding\n    }\n  }, {\n    key: \"removeModalAttributes\",\n    value: function removeModalAttributes(_modal) {// For overriding\n    }\n  }, {\n    key: \"setContainerStyle\",\n    value: function setContainerStyle(containerState) {\n      var style = {\n        overflow: 'hidden'\n      }; // we are only interested in the actual `style` here\n      // because we will override it\n\n      var paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n      var container = this.getElement();\n      containerState.style = _defineProperty({\n        overflow: container.style.overflow\n      }, paddingProp, container.style[paddingProp]);\n\n      if (containerState.scrollBarWidth) {\n        // use computed style, here to get the real padding\n        // to add our scrollbar width\n        style[paddingProp] = \"\".concat(parseInt(css(container, paddingProp) || '0', 10) + containerState.scrollBarWidth, \"px\");\n      }\n\n      container.setAttribute(OPEN_DATA_ATTRIBUTE, '');\n      css(container, style);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this = this;\n\n      _toConsumableArray(this.modals).forEach(function (m) {\n        return _this.remove(m);\n      });\n    }\n  }, {\n    key: \"removeContainerStyle\",\n    value: function removeContainerStyle(containerState) {\n      var container = this.getElement();\n      container.removeAttribute(OPEN_DATA_ATTRIBUTE);\n      Object.assign(container.style, containerState.style);\n    }\n  }, {\n    key: \"add\",\n    value: function add(modal) {\n      var modalIdx = this.modals.indexOf(modal);\n\n      if (modalIdx !== -1) {\n        return modalIdx;\n      }\n\n      modalIdx = this.modals.length;\n      this.modals.push(modal);\n      this.setModalAttributes(modal);\n\n      if (modalIdx !== 0) {\n        return modalIdx;\n      }\n\n      this.state = {\n        scrollBarWidth: this.getScrollbarWidth(),\n        style: {}\n      };\n\n      if (this.handleContainerOverflow) {\n        this.setContainerStyle(this.state);\n      }\n\n      return modalIdx;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(modal) {\n      var modalIdx = this.modals.indexOf(modal);\n\n      if (modalIdx === -1) {\n        return;\n      }\n\n      this.modals.splice(modalIdx, 1); // if that was the last modal in a container,\n      // clean up the container\n\n      if (!this.modals.length && this.handleContainerOverflow) {\n        this.removeContainerStyle(this.state);\n      }\n\n      this.removeModalAttributes(modal);\n    }\n  }, {\n    key: \"isTopModal\",\n    value: function isTopModal(modal) {\n      return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n    }\n  }]);\n\n  return ModalManager;\n}();\n\nexport default ModalManager;","map":{"version":3,"sources":["D:/15.02.2024/YayÄ±nlanan Siteler/React_Yenidunya/node_modules/react-bootstrap/node_modules/@restart/ui/esm/ModalManager.js"],"names":["css","dataAttr","getBodyScrollbarWidth","OPEN_DATA_ATTRIBUTE","ModalManager","ownerDocument","handleContainerOverflow","isRTL","modals","document","body","_modal","containerState","style","overflow","paddingProp","container","getElement","scrollBarWidth","parseInt","setAttribute","forEach","m","remove","removeAttribute","Object","assign","modal","modalIdx","indexOf","length","push","setModalAttributes","state","getScrollbarWidth","setContainerStyle","splice","removeContainerStyle","removeModalAttributes"],"mappings":"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","sourcesContent":["import css from 'dom-helpers/css';\nimport { dataAttr } from './DataKey';\nimport getBodyScrollbarWidth from './getScrollbarWidth';\nexport const OPEN_DATA_ATTRIBUTE = dataAttr('modal-open');\n\n/**\n * Manages a stack of Modals as well as ensuring\n * body scrolling is is disabled and padding accounted for\n */\nclass ModalManager {\n  constructor({\n    ownerDocument,\n    handleContainerOverflow = true,\n    isRTL = false\n  } = {}) {\n    this.handleContainerOverflow = handleContainerOverflow;\n    this.isRTL = isRTL;\n    this.modals = [];\n    this.ownerDocument = ownerDocument;\n  }\n  getScrollbarWidth() {\n    return getBodyScrollbarWidth(this.ownerDocument);\n  }\n  getElement() {\n    return (this.ownerDocument || document).body;\n  }\n  setModalAttributes(_modal) {\n    // For overriding\n  }\n  removeModalAttributes(_modal) {\n    // For overriding\n  }\n  setContainerStyle(containerState) {\n    const style = {\n      overflow: 'hidden'\n    };\n\n    // we are only interested in the actual `style` here\n    // because we will override it\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const container = this.getElement();\n    containerState.style = {\n      overflow: container.style.overflow,\n      [paddingProp]: container.style[paddingProp]\n    };\n    if (containerState.scrollBarWidth) {\n      // use computed style, here to get the real padding\n      // to add our scrollbar width\n      style[paddingProp] = `${parseInt(css(container, paddingProp) || '0', 10) + containerState.scrollBarWidth}px`;\n    }\n    container.setAttribute(OPEN_DATA_ATTRIBUTE, '');\n    css(container, style);\n  }\n  reset() {\n    [...this.modals].forEach(m => this.remove(m));\n  }\n  removeContainerStyle(containerState) {\n    const container = this.getElement();\n    container.removeAttribute(OPEN_DATA_ATTRIBUTE);\n    Object.assign(container.style, containerState.style);\n  }\n  add(modal) {\n    let modalIdx = this.modals.indexOf(modal);\n    if (modalIdx !== -1) {\n      return modalIdx;\n    }\n    modalIdx = this.modals.length;\n    this.modals.push(modal);\n    this.setModalAttributes(modal);\n    if (modalIdx !== 0) {\n      return modalIdx;\n    }\n    this.state = {\n      scrollBarWidth: this.getScrollbarWidth(),\n      style: {}\n    };\n    if (this.handleContainerOverflow) {\n      this.setContainerStyle(this.state);\n    }\n    return modalIdx;\n  }\n  remove(modal) {\n    const modalIdx = this.modals.indexOf(modal);\n    if (modalIdx === -1) {\n      return;\n    }\n    this.modals.splice(modalIdx, 1);\n\n    // if that was the last modal in a container,\n    // clean up the container\n    if (!this.modals.length && this.handleContainerOverflow) {\n      this.removeContainerStyle(this.state);\n    }\n    this.removeModalAttributes(modal);\n  }\n  isTopModal(modal) {\n    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n  }\n}\nexport default ModalManager;"]},"metadata":{},"sourceType":"module"}